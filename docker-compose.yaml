version: '3'
services:

  postgres:
    image: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
    ports:
      - 5432:5432
    restart: unless-stopped

  redpanda:
    image: docker.redpanda.com/vectorized/redpanda:v22.2.2
    command:
      - redpanda start
      - --smp 1
      - --overprovisioned
      - --node-id 0
      - --kafka-addr PLAINTEXT://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092
      - --advertise-kafka-addr PLAINTEXT://redpanda:29092,OUTSIDE://localhost:9092
      - --pandaproxy-addr 0.0.0.0:8082
      - --advertise-pandaproxy-addr localhost:8082
    environment:
      - AUTO_CREATE_TOPICS_ENABLED=true
    ports:
      - 8081:8081
      - 8082:8082
      - 9092:9092
      - 9644:9644
      - 29092:29092

  redpanda-console:
    image: vectorized/console:latest
    container_name: redpanda-console
    entrypoint: /bin/sh
    command: -c "echo \"$$CONSOLE_CONFIG_FILE\" > /tmp/config.yml; /app/console"
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["redpanda:29092"]
          schemaRegistry:
            enabled: true
            urls: ["http://redpanda:8081"]
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://redpanda:9644"]
        connect:
          enabled: true
          clusters:
            - name: local-connect-cluster
              url: http://connect:8083
    ports:
      - 8080:8080
    depends_on:
      - redpanda


  materialize:
    image: materialize/materialized:v0.12.0
    container_name: materialize
    command: -w1 --disable-telemetry
    ports:
      - 6875:6875

  redis:
    image: 'bitnami/redis:latest'
    container_name: redis
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - 6379:6379

  celery:
    build: api
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/postgres
    command: celery -A api.experiments worker -c 12  # specify max number of tasks. temp solution to how many experiments can be run at the same time
    depends_on:
      - redis
      - postgres
      - redpanda
      - materialize

  api:
    build: api
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/postgres
    ports:
      - 8000:8000
    volumes:
      - ./api:/code
    command: >
      bash -c "
        python init_db.py &&
        uvicorn api.main:app --host 0.0.0.0 --port 8000 --reload --reload-dir /code
      "
    depends_on:
      - postgres
      - redpanda
      - materialize
      - celery

  ui:
    build: ui
    volumes:
      - ./ui:/code
      - node_modules:/code/node_modules
    environment:
      HOST: 0.0.0.0
    command: yarn run dev
    ports:
      - 3000:3000
    depends_on:
      - api

  telegraf:
    image: telegraf
    container_name: telegraf
    restart: always
    volumes:
      - ./dashboard/telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro
    ports:
      - 8125:8125

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: always
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=
    ports:
      - 4000:3000
    volumes:
      - ./dashboard/grafana_volume:/var/lib/grafana
    depends_on:
      - postgres

  synthesizer:
    build: examples/fraud
    depends_on:
      - redpanda


volumes:
  postgres:
  node_modules:
